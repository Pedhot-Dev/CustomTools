<?php

namespace PedhotDev\CustomTools\items;

use PedhotDev\CustomTools\Main;
use pocketmine\item\ItemIdentifier;
use pocketmine\item\Pickaxe as PmPickaxe;
use pocketmine\item\TieredTool;

class Pickaxe extends PmPickaxe
{

    public function __construct(TieredTool $tool)
    {
        $identifier = new ItemIdentifier($tool->getTypeId());
        parent::__construct($identifier, $tool->getName(), $tool->getTier());
    }

    public function getMaxDurability(): int
    {
        if (($nbt = $this->getNamedTag()->getTag("customtools")) !== null) {
            $toolName = $nbt->getValue();
            $customTools = Main::getInstance()->getCustomToolsManager()->getCustomTools($toolName);
            return ($customTools->getDurability() == 0 ? 1 : $customTools->getDurability());
        }
        return parent::getMaxDurability(); // TODO: Change the autogenerated stub
    }

    public function isUnbreakable(): bool
    {
        if (($nbt = $this->getNamedTag()->getTag("customtools")) !== null) {
            $toolName = $nbt->getValue();
            $customTools = Main::getInstance()->getCustomToolsManager()->getCustomTools($toolName);
            return ($customTools->getDurability() == 0);
        }
        return parent::isUnbreakable(); // TODO: Change the autogenerated stub
    }

    protected function getBaseMiningEfficiency(): float
    {
        if (($nbt = $this->getNamedTag()->getTag("customtools")) !== null) {
            $toolName = $nbt->getValue();
            $customTools = Main::getInstance()->getCustomToolsManager()->getCustomTools($toolName);
            return $customTools->getMiningEfficiency();
        }
        return parent::getBaseMiningEfficiency(); // TODO: Change the autogenerated stub
    }

    public function getAttackPoints(): int
    {
        if (($nbt = $this->getNamedTag()->getTag("customtools")) !== null) {
            $toolName = $nbt->getValue();
            $customTools = Main::getInstance()->getCustomToolsManager()->getCustomTools($toolName);
            return $customTools->getAttackPoints();
        }
        return parent::getAttackPoints(); // TODO: Change the autogenerated stub
    }

}